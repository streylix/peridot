import{J as w,s as u,n as F}from"./index-CBY0Y-c-.js";class v{static async processZipFile(r){try{const i=await new w().loadAsync(r),t=[];return await this.processZipEntries(i.files,"",t),t}catch(s){throw console.error("DETAILED Error processing ZIP file:",{message:s.message,stack:s.stack,name:s.name}),s}}static async processZipEntries(r,s,i){var S,l,p,I;const t=new Map,c=[];for(const[d,e]of Object.entries(r))try{if(e.dir){const a=d.replace(/\/$/,""),f=a.split("/").pop()||"Untitled Folder",g={id:this.generateUniqueIdFromDate(e.date),type:"folder",content:`<div>${f}</div>`,dateModified:e.date?e.date.toISOString():new Date().toISOString(),pinned:!1,locked:!1,isOpen:!0,parentFolderId:null};t.set(a,g),i.push(g)}else c.push({path:d,entry:e})}catch(a){console.error("Error processing entry:",{path:d,error:a.message})}for(const{path:d,entry:e}of c)try{const a=await e.async("string"),f=d.split("/").pop()||"Untitled",g=d.split("/").slice(0,-1).join("/"),h=f.split(".").pop().toLowerCase();let o;switch(h){case"json":try{const m=JSON.parse(a),y=Array.isArray(m)?m:[m];for(const n of y)o={id:n.id||this.generateUniqueIdFromDate(e.date),content:n.content||a,dateModified:n.dateModified||(e.date?e.date.toISOString():new Date().toISOString()),dateCreated:n.dateCreated||n.id||(e.date?e.date.toISOString():new Date().toISOString()),pinned:n.pinned||!1,caretPosition:n.caretPosition||0,parentFolderId:((S=t.get(g))==null?void 0:S.id)||null,locked:n.locked||!1,encrypted:n.encrypted||!1},n.encrypted&&(o.keyParams=n.keyParams,o.iv=n.iv,o.visibleTitle=n.visibleTitle),i.push(o)}catch(m){console.error("Error parsing JSON:",{fileName:f,error:m.message}),o={id:this.generateUniqueIdFromDate(e.date),content:this.formatFileContent(a,f,h),dateModified:e.date?e.date.toISOString():new Date().toISOString(),dateCreated:e.date?e.date.toISOString():new Date().toISOString(),pinned:!1,caretPosition:0,parentFolderId:((l=t.get(g))==null?void 0:l.id)||null},i.push(o)}break;case"md":case"txt":o={id:this.generateUniqueIdFromDate(e.date),content:this.formatFileContent(a,f,h),dateModified:e.date?e.date.toISOString():new Date().toISOString(),dateCreated:e.date?e.date.toISOString():new Date().toISOString(),pinned:!1,caretPosition:0,parentFolderId:((p=t.get(g))==null?void 0:p.id)||null},i.push(o);break;default:o={id:this.generateUniqueIdFromDate(e.date),content:this.formatFileContent(a,f,"txt"),dateModified:e.date?e.date.toISOString():new Date().toISOString(),dateCreated:e.date?e.date.toISOString():new Date().toISOString(),pinned:!1,caretPosition:0,parentFolderId:((I=t.get(g))==null?void 0:I.id)||null},i.push(o)}}catch(a){console.error("Error processing file:",{path:d,error:a.message})}for(const[d,e]of t){const a=d.split("/").slice(0,-1).join("/");a&&t.has(a)&&(e.parentFolderId=t.get(a).id)}return i}static generateUniqueIdFromDate(r){return r?r.getTime()+Math.floor(Math.random()*1e3):Date.now()}static formatFileContent(r,s,i){let c=`<div>${s.replace(/\.[^/.]+$/,"")}</div>`;return i==="md"&&(r=r.replace(/!\[(.*?)\]\((.*?)\)/g,'<img src="$2" alt="$1">'),r=r.replace(/\[(.*?)\]\((.*?)\)/g,'<a href="$2">$1</a>')),r.split(`
`).forEach(l=>{l.trim().length>0?c+=`<div>${l}</div>`:c+="<div><br></div>"}),c}static isZipFile(r){return r.type==="application/zip"||r.type==="application/x-zip-compressed"||r.name.toLowerCase().endsWith(".zip")}static async importZip(r,{setNotes:s,onNoteSelect:i}){try{const t=await this.processZipFile(r);await Promise.all(t.map(p=>u.writeNote(p.id,p)));const c=await u.getAllNotes(),S=F.sortNotes(c);s(S);const l=t.find(p=>!p.type);return l&&i&&i(l.id),{success:!0,imported:t.length}}catch(t){throw console.error("FINAL Import Error:",{message:t.message,stack:t.stack,name:t.name}),t}}}export{v as ZipImportHandler};
